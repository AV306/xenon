plugins {
	id 'java'
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	/*maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}*/

	mavenCentral()

	maven {
    	url "https://jitpack.io"
  	}
	
  	maven {
    	url "https://maven.terraformersmc.com/"
  	}
	
  	maven {
    	url "https://maven.shedaniel.me/"
  	}

	maven {
		url "https://maven.siphalor.de/"
	}

	maven {
		url "https://maven.isxander.dev/releases"
	}
}

dependencies {
	// To change the versions, see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// CompleteConfig
	modImplementation "com.github.Lortseam.completeconfig:base:${project.complete_config_version}"
	modImplementation "com.github.Lortseam.completeconfig:gui-cloth:${project.complete_config_version}"
	//modImplementation "com.github.shedaniel:cloth-config:v10-SNAPSHOT"

	implementation "org.slf4j:slf4j-api:${project.slf4j_version}"

	// GSON
	//implementation "com.google.code.gson:gson:${project.gson_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching( "fabric.mod.json" ) {
		expand "version": project.version
	}
}

tasks.withType( JavaCompile ).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
	
	//it.options.compilerArgs.add( "--enable-preview" )
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	
	toolchain {
		languageVersion = JavaLanguageVersion.of( 17 )
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// Datagen
loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.archives_base_name}"
 
            runDir "build/datagen"
        }
    }
}
 
//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
